cnpg:
  image: ghcr.io/tensorchord/cloudnative-vectorchord:16-0.4.2

# if PVCs get stuck in Progressing state:
# https://github.com/kubernetes-csi/csi-driver-smb/issues/821
open-webui:

  extraEnvVars:
    - name: DATABASE_HOST
      value: owui-db-rw
    - name: DATABASE_NAME
      value: owui
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: owui-db-superuser
          key: username
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: owui-db-superuser
          key: password
    - name: DATABASE_TYPE
      value: postgres

  replicaCount: 1
  resources:
    requests:
      cpu: 2
      memory: 4Gi

  ingress:
    class: nginx
    enabled: true
    host: open-webui.rannet.duckdns.org
    tls: true
    existingSecret: open-webui-tls
    annotations:
      cert-manager.io/cluster-issuer: duckdns-letsencrypt-prod
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/auth-url: https://my-oauth2-proxy-url/oauth2/auth
      nginx.ingress.kubernetes.io/auth-signin: https://my-oauth2-proxy-url/oauth2/start
      nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User,X-Auth-Request-Email,X-Forwarded-Groups
      nginx.ingress.kubernetes.io/auth-request-redirect: $scheme://$host:$server_port$request_uri$is_args$args

  # TODO: figure out what to do with this one; using cnpg below
  persistence:
    enabled: false
    size: 8Gi
    storageClass: smb
    # autogenerated by cluster on initial sync
    existingClaim: open-webui
    volumeName: pvc-be195e50-a8fb-489c-a27e-4c07ff140aab

  pipelines:
    resources:
      requests:
        cpu: 1
        memory: 4Gi
    strategy:
      type: Recreate
    persistence:
      enabled: true
      size: 2Gi
      storageClass: longhorn
      existingClaim: open-webui-pipelines
      # autogenerated by cluster on initial sync
      volumeName: pvc-ba933136-1dee-458c-90c4-360553a0f858

  # values ref: https://github.com/otwld/ollama-helm/blob/main/values.yaml
  # https://github.com/open-webui/helm-charts/issues/17#issuecomment-2105195244
  ollama:
    enabled: true

    image:
      tag: latest
      pullPolicy: Always

    extraEnv:
      - name: OLLAMA_KEEP_ALIVE
        value: "-1"

    resources:
      requests:
        memory: "15Gi"
      limits:
        memory: "30Gi"

    ingress:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: duckdns-letsencrypt-prod
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      hosts:
        - host: ollama.rannet.duckdns.org
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: ollama-backend-tls-cert
          hosts:
            - ollama.rannet.duckdns.org
    runtimeClassName: nvidia
    ollama:
      # these for some reason stall the container; processes will literally hang
      # not sure if this is because Im running these off of a NAS
      # models:
      #   pull:
      #     - gemma3:12B
      #     - gemma3:27B
      #     - qwen2.5-coder:14b-base-q6_K
      #     - qwen2.5-coder:32b-base-q6_K
      #   run:
      #     - gemma3:4B
      #     # - gemma3:27B
      #     # - qwen2.5-coder:32b-base-q6_K
      gpu:
        enabled: true
        type: nvidia
        nvidiaResource: "nvidia.com/gpu"
        number: 1
    persistentVolume:
      enabled: true
      size: 256Gi
      storageClass: longhorn
      # autogenerated by cluster on initial sync
      existingClaim: open-webui-ollama
      #volumeName: pvc-58d2f98b-7b6c-40bc-b30a-d0e52595d2ca
