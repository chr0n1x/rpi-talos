cnpg:
  image: ghcr.io/tensorchord/cloudnative-vectorchord:17.5-0.3.0
  # image: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16.5-v0.3.0@sha256:be3f025d79aa1b747817f478e07e71be43236e14d00d8a9eb3914146245035ba

# note: for this setup - backups are stored into the SMB share
#
# 1. take the latest tz backup in ./backups
# 2. unzip: gunzip <file>.gz --> yields <backup>.sql
# 3. sed -i "s/SELECT pg_catalog.set_config('search_path', '', false);/SELECT pg_catalog.set_config('search_path', 'public, pg_catalog', true);/g" <backup>.sql
# 4. then remove instances where the postgres user is being updated in the sql
#    file (if need be). when running the script, if those lines are in there
#    and you're using the postgres user credentials, the script RESETS the
#    password, which can cause your connetion to drop.
#
# #3 is from the docs
#   https://immich.app/docs/administration/backup-and-restore/
# no idea why it's necessary
#
#
# finally, portforward to your RW db endpoint
#
#   kubectl --namespace immich port-forward services/immich-rw 5432:5432
#
# and restore via psql locally - e.g.:
#
#   # if you don't have psql locally
#   sudo apt install postgresql-client
#
#   # note this will output the password with a '%' at the end; the '%' is NOT
#   # a part of the password
#   kubectl get secret immich-superuser -o=yaml | yq .data.password | base64 -d
#
#   # use password above in interactive terminal
#   cat <backup>.sql | psql "sslmode=disable host=127.0.0.1 dbname=immich port=5432 user=postgres"
#
# note that sslmode is required for portforward. if you're hosting w/
# a cert/ssl it's probably not needed
# more info here: https://github.com/cloudnative-pg/cloudnative-pg/discussions/1171
immich:
  image:
    tag: v1.133.0

  immich:
    persistence:
      library:
        existingClaim: immich-store-pvc

  redis:
    enabled: true

  server:
    replicas: 0
    env:
      - name: DB_HOSTNAME
        value: immich-rw

      - name: DB_DATABASE_NAME
        value: immich

      - name: DB_USERNAME
        valueFrom:
          secretKeyRef:
            name: immich-superuser
            key: username

      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: immich-superuser
            key: password

      # these are SUPPOSED to be autogenerated by the chart, but because of the
      # secrets above the lib template for deployments clobbers everything OMG
      - name: IMMICH_MACHINE_LEARNING_URL
        value: http://immich-machine-learning:3003
      - name: REDIS_HOSTNAME
        value: immich-redis-master

    ingress:
      main:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: duckdns-letsencrypt-prod
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
          nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        hosts:
          - host: immich.rannet.duckdns.org
            paths:
              - path: "/"
        tls:
          - hosts:
            - immich.rannet.duckdns.org
            secretName: immich-cert
